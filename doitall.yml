- name: Create an instance
  hosts: localhost
  gather_facts: no
  vars:
      gcp_project: segmentify
      gcp_cred_kind: serviceaccount
      gcp_cred_file: ../segmentify-b1c4f7958044.json
      zone: "europe-west3-c"
      region: "europe-west3"
      build_repo: https://github.com/bachadir/segmentify_app.git
      build_version: Version-1
      ssh_key_location: /root/.ssh/google
      ssh_user: bahadirtasdelen_gmail_com
  tasks:
   - set_fact:
         random_vm_name: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"
   - name: create a disk
     gcp_compute_disk:
         name: 'disk-{{ random_vm_name }}'
         size_gb: 20
         source_image: 'projects/centos-cloud/global/images/family/centos-8'
         zone: "{{ zone }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         scopes:
           - https://www.googleapis.com/auth/compute
         state: present
     register: disk
   - name: create a address
     gcp_compute_address:
         name: 'address-{{ random_vm_name }}'
         region: "{{ region }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         scopes:
           - https://www.googleapis.com/auth/compute
         state: present
     register: address
   - name: create a instance
     gcp_compute_instance:
         state: present
         name: vm-{{ random_vm_name }}
         machine_type: e2-micro
         disks:
           - auto_delete: true
             boot: true
             source: "{{ disk }}"
         network_interfaces:
             - network: null # use default
               access_configs:
                 - name: 'External NAT'
                   nat_ip: "{{ address }}"
                   type: 'ONE_TO_ONE_NAT'
         zone: "{{ zone }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         tags: 
            items: 'http-server,https-server'
         scopes:
           - https://www.googleapis.com/auth/compute
     register: instance
   - name: Wait for SSH to come up
     wait_for: host={{ address.address }} port=22 delay=10 timeout=60
   - name: Add host to groupname
     add_host: hostname={{ address.address }} groupname=segmentify
   - name: Copy host address to file 
     ansible.builtin.copy: 
        content: '{{ address.address }}' 
        dest: ./hosts 
   - name: Send the service file
     ansible.builtin.command:
          cmd: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ ssh_key_location }} ./helloworld.service {{ ssh_user }}@{{ address.address }}:/home/{{ ssh_user }}
   - name: Add the service 
     ansible.builtin.command:
          cmd: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ ssh_key_location }}  {{ ssh_user }}@{{ address.address }} 'sudo cp /home/{{ ssh_user }}/helloworld.service /etc/systemd/system/ && sudo chown root:root /etc/systemd/system/helloworld.service && sudo systemctl enable helloworld.service && sudo setenforce 0 '
   - name: Deployment
     ansible.builtin.git:
         repo: '{{ build_repo }}'
         dest: ./segmentify_app
         version: '{{ build_version }}'
   - name: Build application
     ansible.builtin.command:
         cmd: go build -o ./segmentify_app/helloworld-{{ build_version }} ./segmentify_app/main.go 
         creates: ./segmentify_app/helloworld-{{ build_version }}
   - name: Deploy to server 
     ansible.builtin.command:
          cmd: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ ssh_key_location }} ./segmentify_app/helloworld-{{ build_version }} {{ ssh_user }}@{{ address.address }}:/home/{{ ssh_user }}
   - name: Create Symlink
     ansible.builtin.command:
         cmd: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ ssh_key_location }}  {{ ssh_user }}@{{ address.address }} 'ln -s /home/{{ ssh_user }}/helloworld-{{build_version}} /home/{{ ssh_user }}/helloworld'
   - name: Start the service
     ansible.builtin.command:
          cmd: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ ssh_key_location }}  {{ ssh_user }}@{{ address.address }} 'sudo systemctl restart helloworld.service'
   - name: Wait for http to come up
     wait_for: host={{ address.address }} port=80 delay=10 timeout=60